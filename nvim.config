"  _   _ _____ _____ _   _ ________  ___
" | \ | |  ___|  _  | | | |_   _|  \/  |
" |  \| | |__ | | | | | | | | | | .  . |
" | . ` |  __|| | | | | | | | | | |\/| |
" | |\  | |___\ \_/ | \_/ /_| |_| |  | |
" \_| \_|____/ \___/ \___/ \___/\_|  |_/
"  _____ _____ _   _______ _____ _____  
" /  __ \  _  | \ | |  ___|_   _|  __ \ 
" | /  \/ | | |  \| | |_    | | | |  \/ 
" | |   | | | | . ` |  _|   | | | | __  
" | \__/\ \_/ / |\  | |    _| |_| |_\ \ 
"  \____/\___/\_| \_|_|    \___/ \____/ 
"
"  Configuration file for Neovim.
"
"  References:
"  - https://neovim.io/doc/
"  - https://alex.dzyoba.com/blog/vim-revamp

" Plugins {{{
" Plugin management using vim-plug.

call plug#begin('~/.local/share/nvim/plugged')

" Conquer of Completion is an intellisense engine for Neovim
Plug 'neoclide/coc.nvim', {'tag': '*', 'do': { -> coc#util#install()}}

" A large language pack that lazy loads based on the buffers current filetype.
Plug 'sheerun/vim-polyglot'

" Go development plugin for Vim
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" Nord theme from for (Neo)vim.
Plug 'arcticicestudio/nord-vim'

" Lightweight Powerline style status bar.
Plug 'itchyny/lightline.vim'

" Gets the current git branch information. 
Plug 'itchyny/vim-gitbranch'

" Show git hunk information in the gutter.
Plug 'airblade/vim-gitgutter'

call plug#end()

" }}}
" General Settings {{{
" General Neovim settings that don't belong in a specific group.

" Use relative line numbers. Instead of showing the actual line numbers on the
" left hand side of the buffer, it shows how many lines away a given line is
" from the line the cursor is on. The line the cursor is on does show the
" actual line number.
set number relativenumber

" Fill in the characters at column 80 as a visual marker for wrapping long
" lines.
set colorcolumn=80

" Expand tab key tabs to spaces. Each indentation is 2 characters each.
set expandtab shiftwidth=2
set tabstop=2
set softtabstop=2

" Show `▸▸` for tabs and · for trailing whitespace characters.
set list listchars=tab:▸▸,trail:·

" Enable the use of the mouse. The rodent should be used as little as
" possible, but it's worth having the compatibility once in a while.
set mouse=a

" Enable the use of folding. Folding is useful when needing to hide
" information that is currently non-critical. For example, this config uses
" folding to group and hide like configurations.
set foldenable

" Enable Deoplete
let g:deoplete#enable_at_startup = 1

" Enable the persistent undo file. This file keeps track of the edit history
" of Neovim, which means regaining the undo history when opening a file that
" was edited by Neovm.
set undodir=~/.local/share/nvim/undo
set undofile

" Make y and p use the _global_ clipboard buffer. This allows yanking from
" Neovim to other applications, and putting text copied/cut from other
" applications.
set clipboard+=unnamed

" Have Neovim check for buffer updates every 100ms
set updatetime=100

" }}}
" Mappings & Remappings {{{
" All key mapping and remapping goes here. Includes mappings for <leader>.

" Map the <leader> key to the comma key. I find the comma key comfortable for
" quick & common actions like saving or quitting.
let mapleader=','

" Map <leader>w to write the file to disk.
nnoremap <silent> <leader>w :write<CR>

" Map <leader>q to quit the current window with a confirmation dialog if any
" changes have been made to the current buffer.
nnoremap <silent> <leader>q :confirm quit<CR>

" Map <leader>v to split the window vertically and <leader>h to split the
" window horizontally.
nnoremap <leader>v :vsplit<CR>
nnoremap <leader>h :split<CR>

" Map <leader>,[hjkl] to move between splits. I don't know if this is more
" ergonomic than just using ctrl-w+[hjkl], but I'm going to give it a shot.
nnoremap <leader>,h <c-w>h
nnoremap <leader>,j <c-w>j
nnoremap <leader>,k <c-w>k
nnoremap <leader>,l <c-w>l

" Map 0 to go to the first non-whitespace characer in a line.
nnoremap 0 ^

" Map j and k to move up and down visual lines instead of actual lines. This
" way--if a line is being wrapped--I can comfortably move between the wrapped
" lines as they appear.
nnoremap j gj
nnoremap k gk

" Map gV to select the last inserted text in visual mode. Useful for quickly
" indenting newly written code.
nnoremap gV `[v`]

" }}}
" Visuals {{{
" Settings that change the look of Neovim. For example, colour schemes.

" Allows the TUI version of Neovim to utilise 'true colours', the 256-colour
" spectrum.
set termguicolors

" Highlight the line the cursor is currently on.
set cursorline

" Enable italics and underlines as part of `nord-vim`.
let g:nord_italic = 1
let g:nord_italic_comments = 1
let g:nord_underline = 1
let g:nord_cursor_line_number_background = 1

" Set the colour scheme to `nord-vim`
colorscheme nord

" Configuration settings for `lightline.vim`. Enables the `nord` colour
" scheme to match the global scheme. Also adds the git branch name to the
" status bar if the file in the buffer is part of a git repo, and the output
" of CoC.
let g:lightline = {
      \ 'colorscheme': 'nord',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'cocstatus', 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'gitbranch#name',
      \   'cocstatus': 'coc#status'
      \ },
      \ }

" Do not show the mode at the bottom of the window. `lightline.vim` does this
" for us.
set noshowmode

" Enable `vim-gitgutter`
let g:gitgutter_enabled = 1

" }}}
" vim:foldmethod=marker:foldlevel=0:filetype=vim
